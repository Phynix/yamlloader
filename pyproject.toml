[build-system]
build-backend = "hatchling.build"

requires = [
  "hatch-vcs",
  "hatchling",
]

[project]
name = "yamlloader"
description = "Ordered YAML loader and dumper for PyYAML."
readme = "README.rst"
keywords = [
  "dict",
  "dumper",
  "loader",
  "ordered",
  "PyYAML",
  "yaml",
]

license.file = "LICENSE"
maintainers = [
  { name = "Jonas Eschle", email = "jonas.eschle@gmail.com" },
]
authors = [
  { name = "Jonas Eschle", email = "jonas.eschle@gmail.com" },
  { name = "Johannes Lade", email = "johannes.lade@phynix.science" },
]
requires-python = ">=3.7"

classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "Intended Audience :: System Administrators",
  "License :: OSI Approved :: MIT License",
  "Natural Language :: English",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Software Development :: Libraries",
  "Topic :: Utilities",
]

dynamic = [ "version" ]

optional-dependencies.dev = [ "yamlloader[test,doc]" ]
optional-dependencies.doc = [ "sphinx", "sphinx-autodoc-typehints", "sphinx-rtd-theme", "sphinxcontrib-apidoc" ]
optional-dependencies.test = [ "coverage", "hypothesis" ]
urls.Documentation = "https://yamlloader.readthedocs.io/"
urls.Homepage = "https://github.com/Phynix/yamlloader"

[tool.hatch]
version.source = "vcs"
build.hooks.vcs.version-file = "src/yamlloader/_version.py"

[tool.ruff]
#src = ["src"]
line-length = 120
exclude = [
  "*/__init__.py",
  "*/_version.py",
  "*/test*",
  ".tox/*",
]
lint.extend-select = [
  "ARG", # flake8-unused-arguments
  "B",   # flake8-bugbear
  "C4",  # flake8-comprehensions
  "EM",  # flake8-errmsg
  "EXE", # flake8-executable
  "G",   # flake8-logging-format
  "I",   # isort
  "ICN", # flake8-import-conventions
  "NPY", # NumPy specific rules
  "PD",  # pandas-vet
  "PGH", # pygrep-hooks
  "PIE", # flake8-pie
  "PL",  # pylint
  "PT",  # flake8-pytest-style
  "PTH", # flake8-use-pathlib
  "RET", # flake8-return
  "RUF", # Ruff-specific
  "SIM", # flake8-simplify
  "T20", # flake8-print
  "UP",  # pyupgrade
  "YTT", # flake8-2020
]
lint.ignore = [
  "ISC001", # Conflicts with formatter
  "NPY002", # "Use rnd generator in numpy" -> we use np.random for some legacy stuff but do use the new one where we can

  "PD011",   # "replace `df[...].values` with `df[...].to_numpy()`" -> not yet, it's not deprecated.
  "PD013",   # "melt over stack": df function, but triggers on tensors
  "PD901",   # "avoid using `df[...].values`" -> no, this is a very good name if there is only one df
  "PLR09",   # Too many <...>
  "PLR2004", # Magic value used in comparison
  # Prefer to have a single way to access the data if we don't care about whether it's a numpy array or not.
  "PLW0603", # updating global variables with a function is bad, but we use it for
  "PLW2901", # "for loop overwritten by assignment" -> we use this to update the loop variable
  "RET505",  # This is sometimes wanted, protets against accidental intendation
  "UP007",   # type annotation upgrade, breaks pydantic for Python 3.9 (remove once above)
]
lint.per-file-ignores."noxfile.py" = [ "T20" ]
lint.per-file-ignores."tests/**" = [ "T20" ]
